#include <iostream>
#include <vector>

using namespace std;

// 행렬 출력 함수
void printMatrix(const vector<vector<double>>& matrix) {
    for (const auto& row : matrix) {
        for (double value : row) {
            cout << value << " ";
        }
        cout << endl;
    }
}

// 루 펙토리제이션 함수
void luFactorization(const vector<vector<double>>& A, vector<vector<double>>& L, vector<vector<double>>& U) {
    int n = A.size();
    
    // 상삼각행렬(U) 초기화
    U = A;
    
    // 하삼각행렬(L) 초기화
    L = vector<vector<double>>(n, vector<double>(n, 0.0));
    for (int i = 0; i < n; i++) {
        L[i][i] = 1.0;
    }
    
    // 가우스 소거법을 사용하여 LU 분해
    for (int k = 0; k < n - 1; k++) {
        for (int i = k + 1; i < n; i++) {
            double factor = U[i][k] / U[k][k];
            L[i][k] = factor;
            for (int j = k; j < n; j++) {
                U[i][j] -= factor * U[k][j];
            }
        }
    }
}

int main() {
    int rows, cols;
    cout << "Enter the number of rows and columns of the matrix: ";
    cin >> rows >> cols;
    
      // 입력받은 행렬의 크기로 2차원 벡터 생성
    vector<vector<double>> A(rows, vector<double>(cols));

    // 행렬의 각 원소를 입력 받음
    cout << "Enter the elements of the matrix:" << endl;
    for (int q = 0; q < rows; ++q) {
        for (int w = 0; w < cols; ++w) {
            cin >> A[q][w];
        }
    }
    
    // 하삼각행렬(L)과 상삼각행렬(U)
    vector<vector<double>> L, U;
    
    // 루 펙토리제이션
    luFactorization(A, L, U);
    
    // 결과 출력
    cout << "Lower triangular matrix (L):" << endl;
    printMatrix(L);
    cout << endl;
    
    cout << "Upper triangular matrix (U):" << endl;
    printMatrix(U);
    
    return 0;
}
